using System;

public class MatrixShort
{
    // Захищені поля
    protected uint[,] ShortArray;
    protected int n, m;
    protected int codeError;
    protected static int num_m = 0;

    // Конструктори
    public MatrixShort()
    {
        n = 1;
        m = 1;
        ShortArray = new uint[1, 1];
        ShortArray[0, 0] = 0;
        codeError = 0;
        num_m++;
    }

    public MatrixShort(int rows, int cols)
    {
        n = rows;
        m = cols;
        ShortArray = new uint[n, m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                ShortArray[i, j] = 0;
        codeError = 0;
        num_m++;
    }

    public MatrixShort(int rows, int cols, uint initValue)
    {
        n = rows;
        m = cols;
        ShortArray = new uint[n, m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                ShortArray[i, j] = initValue;
        codeError = 0;
        num_m++;
    }

    // Деструктор
    ~MatrixShort()
    {
        Console.WriteLine($"Matrix {n}x{m} destroyed");
        num_m--;
    }

    // Методи
    public void Input()
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                Console.Write($"Enter element [{i},{j}]: ");
                string? input = Console.ReadLine(); // Explicitly annotate as nullable
                if (string.IsNullOrEmpty(input))
                {
                    Console.WriteLine("Invalid input (null or empty), setting to 0");
                    ShortArray[i, j] = 0;
                }
                else if (!uint.TryParse(input, out uint value))
                {
                    Console.WriteLine("Invalid input (not a valid uint), setting to 0");
                    ShortArray[i, j] = 0;
                }
                else
                {
                    ShortArray[i, j] = value;
                }
            }
        }
    }

    public void Display()
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
                Console.Write($"{ShortArray[i, j],4} ");
            Console.WriteLine();
        }
    }

    public void SetValue(uint value)
    {
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                ShortArray[i, j] = value;
    }

    public static int GetMatrixCount() => num_m;

    // Властивості
    public int Rows => n;
    public int Cols => m;
    public int CodeError
    {
        get => codeError;
        set => codeError = value;
    }

    // Індексатори
    public uint this[int i, int j]
    {
        get
        {
            if (i >= 0 && i < n && j >= 0 && j < m)
                return ShortArray[i, j];
            codeError = -1;
            return 0;
        }
        set
        {
            if (i >= 0 && i < n && j >= 0 && j < m)
                ShortArray[i, j] = value;
            else
                codeError = -1;
        }
    }

    public uint this[int k]
    {
        get
        {
            int i = k / m;
            int j = k % m;
            if (i >= 0 && i < n && j >= 0 && j < m)
                return ShortArray[i, j];
            codeError = -1;
            return 0;
        }
        set
        {
            int i = k / m;
            int j = k % m;
            if (i >= 0 && i < n && j >= 0 && j < m)
                ShortArray[i, j] = value;
            else
                codeError = -1;
        }
    }

    // Перевантаження унарних операцій
    public static MatrixShort operator ++(MatrixShort m)
    {
        for (int i = 0; i < m.n; i++)
            for (int j = 0; j < m.m; j++)
                m.ShortArray[i, j]++;
        return m;
    }

    public static MatrixShort operator --(MatrixShort m)
    {
        for (int i = 0; i < m.n; i++)
            for (int j = 0; j < m.m; j++)
                m.ShortArray[i, j]--;
        return m;
    }

    public static bool operator true(MatrixShort m) =>
        m.n != 0 && m.m != 0 && !m.AllZeros();

    public static bool operator false(MatrixShort m) =>
        m.n == 0 || m.m == 0 || m.AllZeros();

    private bool AllZeros()
    {
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (ShortArray[i, j] != 0)
                    return false;
        return true;
    }

    public static MatrixShort operator !(MatrixShort m) =>
        new MatrixShort(m.n, m.m, m.n != 0 && m.m != 0 ? (uint)1 : 0);

    public static MatrixShort operator ~(MatrixShort m)
    {
        MatrixShort result = new MatrixShort(m.n, m.m);
        for (int i = 0; i < m.n; i++)
            for (int j = 0; j < m.m; j++)
                result[i, j] = ~m[i, j];
        return result;
    }

    // Перевантаження бінарних операцій
    public static MatrixShort operator +(MatrixShort a, MatrixShort b)
    {
        int minN = Math.Min(a.n, b.n);
        int minM = Math.Min(a.m, b.m);
        MatrixShort result = new MatrixShort(a.n, a.m);

        for (int i = 0; i < minN; i++)
            for (int j = 0; j < minM; j++)
                result[i, j] = a[i, j] + b[i, j];

        return result;
    }

    public static MatrixShort operator +(MatrixShort m, short s)
    {
        MatrixShort result = new MatrixShort(m.n, m.m);
        for (int i = 0; i < m.n; i++)
            for (int j = 0; j < m.m; j++)
                result[i, j] = (uint)(m[i, j] + s);
        return result;
    }

    // Операції порівняння
    public static bool operator ==(MatrixShort a, MatrixShort b)
    {
        if (ReferenceEquals(a, null) && ReferenceEquals(b, null))
            return true;
        if (ReferenceEquals(a, null) || ReferenceEquals(b, null))
            return false;
        if (a.n != b.n || a.m != b.m) return false;
        for (int i = 0; i < a.n; i++)
            for (int j = 0; j < a.m; j++)
                if (a[i, j] != b[i, j])
                    return false;
        return true;
    }

    public static bool operator !=(MatrixShort a, MatrixShort b) => !(a == b);

    public static bool operator >(MatrixShort a, MatrixShort b)
    {
        int minN = Math.Min(a.n, b.n);
        int minM = Math.Min(a.m, b.m);
        for (int i = 0; i < minN; i++)
            for (int j = 0; j < minM; j++)
                if (a[i, j] <= b[i, j])
                    return false;
        return true;
    }

    public static bool operator <(MatrixShort a, MatrixShort b)
    {
        int minN = Math.Min(a.n, b.n);
        int minM = Math.Min(a.m, b.m);
        for (int i = 0; i < minN; i++)
            for (int j = 0; j < minM; j++)
                if (a[i, j] >= b[i, j])
                    return false;
        return true;
    }

    public static bool operator >=(MatrixShort a, MatrixShort b)
    {
        int minN = Math.Min(a.n, b.n);
        int minM = Math.Min(a.m, b.m);
        for (int i = 0; i < minN; i++)
            for (int j = 0; j < minM; j++)
                if (a[i, j] < b[i, j])
                    return false;
        return true;
    }

    public static bool operator <=(MatrixShort a, MatrixShort b)
    {
        int minN = Math.Min(a.n, b.n);
        int minM = Math.Min(a.m, b.m);
        for (int i = 0; i < minN; i++)
            for (int j = 0; j < minM; j++)
                if (a[i, j] > b[i, j])
                    return false;
        return true;
    }

    // Перевизначення Equals і GetHashCode
    public override bool Equals(object? obj)
    {
        if (obj == null || GetType() != obj.GetType())
            return false;

        MatrixShort other = (MatrixShort)obj; // No need for ! since null check is done
        if (n != other.n || m != other.m)
            return false;

        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (ShortArray[i, j] != other.ShortArray[i, j])
                    return false;

        return true;
    }

    public override int GetHashCode()
    {
        int hash = 17;
        hash = hash * 23 + n.GetHashCode();
        hash = hash * 23 + m.GetHashCode();
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                hash = hash * 23 + ShortArray[i, j].GetHashCode();
        return hash;
    }
}

// Тестова програма
namespace MatrixApp
{
    class Program
    {
        static void Main()
        {
            // Тестування конструкторів
            MatrixShort m1 = new MatrixShort();
            MatrixShort m2 = new MatrixShort(2, 3);
            MatrixShort m3 = new MatrixShort(2, 2, 5);

            // Тестування вводу/виводу
            Console.WriteLine("Enter 2x3 matrix:");
            m2.Input();
            Console.WriteLine("\nMatrix m2:");
            m2.Display();

            // Тестування унарних операцій
            Console.WriteLine("\nm2 after ++:");
            m2++;
            m2.Display();

            // Тестування бінарних операцій
            Console.WriteLine("\nm3 + 3:");
            (m3 + 3).Display();

            // Тестування кількості матриць
            Console.WriteLine($"\nNumber of matrices: {MatrixShort.GetMatrixCount()}");
        }
    }
}
